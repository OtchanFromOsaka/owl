# Rules

This file is a rule book that the user and AI create to cooperate and work efficiently.

Basically, it is created by the user, but contexts can be edited by the AI as well. Please edit each and every context as soon as you find one that you may need in the future.

If you find that other parts need to be edited, please check with the user first.

## Contexts in this repository

AI can add to it as needed.

### Project Structure

The project is a HonoX application deployed to Cloudflare Workers with the following structure:

- `app/`: Main application code
  - `client.ts`: Client-side entry point using HonoX client
  - `server.ts`: Server-side entry point using HonoX server
  - `style.css`: Global styles
  - `islands/`: Interactive components (client-side hydrated)
    - `counter.tsx`: Simple counter component with increment button
  - `routes/`: Application routes
    - `index.tsx`: Main page route with counter component
    - `_renderer.tsx`: JSX renderer for HTML structure
    - `_404.tsx`: 404 Not Found handler
    - `_error.tsx`: Error handler
- `public/`: Static assets
- `types/`: TypeScript type definitions

### Build and Deployment

- Development server: `pnpm dev` (Vite)
- Build: `pnpm build` (Vite + Cloudflare Workers)
- Preview: `pnpm preview` (Wrangler)
- Deploy: `pnpm deploy` (Wrangler)

### Testing

- Unit tests: `pnpm test` (Vitest with happy-dom)
- E2E tests: `pnpm e2e` (Playwright)

## Git

The main branch should always be stable.

Work on the main-x.x.x branch and run tests before merging into the main branch.

Commit shall be performed for each pure function or component file created. Updates and modifications to functions are also committed individually. However, it is assumed that the biome and test commands have been executed and succeeded before the commit.

Also, development instructions and git commit instructions are given separately. Ask the user once the indicated function or modification is completed.

## Docker

Your local D:\dev\owl is the repository root.

The container is named owl-app and everything in D:\dev\owl is mounted to /home/owl/dev in the container.

The user performs tasks on the host OS (Windows), such as creating and starting the container, but the user and AI work together in the container.

Only software installation is done by the root user, while other tasks such as development are done by the owl user.

Since AI starts work from the beginning as an owl user in ~/dev (/home/owl/dev), there is no particular need to be aware of the container.

## Technology Selection

pnpm will be used as the package manager.

HonoX + hono/jsx + TypeScript will be used, following functional programming, domain driven design and test driven development.

Use Biome's default configuration for Linter and Formatter.

Use Vitest for unit testing and Playwright for E2E testing.

## Miscellaneous

If you create a pure function, your first priority is the success of its unit test.

Use early returns to make the nesting of conditional branches shallower.

Run biome lint --write && biome format --write before committing.

Use kebab cases for file names.

Type-related files should be placed in app/types, but only .d.ts should be placed in types/ directly under the repository root.
